五种调度算法的实现
基于event-Driven（事件驱动）实现模拟进程调度

1、最短工作优先（SJF）
2、最短剩余时间优先（SRTF）
3、最高响应比优先（HRRF）
4、优先级调度（Priority）
5、轮转调度（RR）

一、进程
1.1 进程的状态
	等待态
	就绪态
	运行态
	新建态
	终止态
1.2 进程的特征
	四点：
		动态性
		并发性
		独立性
		异步性
1.3 进程的调度
	抢占式 -- 优先级高
	非抢占式

二、线程
2.1 线程的状态
	等就运新终
2.2 线程的特点
	线程是操作系统调度的基本单位
	线程的状态切换比进程更迅速且开销更小
	线程不拥有资源，只是任务的一种抽象，同一进程内的线程共享该进程的资源
	对单核CPU而言，同一时刻只能运行一个线程
	一个进程至少有一个线程，且是他的主线程
2.3 线程与进程的区别
	进程之间相互独立（资源的独立），而某一进程的各线程间共享资源
	由于进程的独立性，进程间要相互通信时，系统只能提供各种外部方法，比较繁琐，而线程间的通信可以通过共享数据实现
	线程的状态切换比进程更快捷且开销更小
	在多线程系统中，线程才是可执行对象，应为线程是进程中的并发任务的一种抽象。原先，进行时运行任务的主体，有了线程之后，运行任务的重担就落到了线程身上。
2.4 线程的优点
	充分利用CPU资源。
	实现了进程内并发，使用任务的粒度分的更细，有利于开发人员对任务的分解、抽象（分解与抽象原则）
	实现了进程内异步事件的处理，尤其是GUI事件、服务端应用等。
	提高了程序的运行效率

三、同步与异步
3.1 同步
	顺序性
	确定性
	简易性
3.2 异步
	创建线程
3.3 实现异步的方法
	如何知晓就任务结束？ 进程间的通信方式
	状态--设置共享变量（flag），旧任务结束时，变量置为有效值，之后旧任务结束，新任务循环检测变量是否结束
	通知--向新任务通知
	回调--把旧任务做完后要做的收尾工作交给旧任务本身，旧任务做完收尾工作后便结束。
	
四、并发与并行
4.1 并发的含义
	并发的精髓就是分配时间片，微观上是间断的，宏观上是连续的。
4.2 并行的含义
	两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行（Parallel）。
4.3 二者之间的区别
	并行的程序比并发的程序效率高，资源利用率高，但编程更复杂，且结果不可预见，调试困难；
	并行会有对资源的争夺，而并发不会（某时刻只有一个程序独占资源），因而并行会有互斥与同步问题，还有由此导致的死锁问题；
	并发是单核CPU的产物，微观上间断，宏观上连续；并行是多核CPU的产物，微观上更连续，宏观上更连续。
	
4.4 死锁
	4.4.1 死锁的定义
		集合中的每一个进程都在等待只能由本集合中的其他进程才能引发的事件，那么该组进程是死锁的。
	4.4.2 死锁发生的四个必要条件
		互斥
		循环等待
		不剥夺条件
		请求和保持条件
	